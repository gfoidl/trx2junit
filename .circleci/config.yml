version: 2
defaults: &defaults
    working_directory: ~/repo
    docker:
        - image: gfoidl/dotnet-xmllint:2.1
          environment:
            DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
            DOTNET_CLI_TELEMETRY_OPTOUT: 1
jobs:
    build_and_test:
        <<: *defaults
        steps:
            - checkout
            - run:
                name: "set build environment"
                command: |
                    if [[ -z "$CI_BUILD_NUMBER" ]]; then
                        echo 'export CI_BUILD_NUMBER="$CIRCLE_BUILD_NUM"' >> "$BASH_ENV"
                        echo 'export BRANCH_NAME="$CIRCLE_BRANCH"' >> "$BASH_ENV"
                        echo 'export TAG_NAME="$CIRCLE_TAG"' >> "$BASH_ENV"
                    fi

                    # Exporting / sourcing the path before installing the tool prevents the message about the PATH
                    echo 'export PATH="$PATH:/root/.dotnet/tools"' >> "$BASH_ENV"
            - run:
                name: init
                command: |
                    chmod ugo+x ./*.sh

                    # Use v1.4.1 as this supports .NET Core 2.1. Version 1.5.0 is for .NET Core 2.2.
                    dotnet tool install -g --version=1.4.1 coverlet.console
            - run:
                # build has to be from the build.sh in order to pick the correct version numbers, etc.
                name: build
                command: ./build.sh build
            - run:
                name: test
                command: ./build.sh test
            - run:
                name: pack
                command: ./build.sh pack
            - run:
                name: global tool install (trx2junit)
                command: |
                    # copied from build.sh (but modified)
                    if [[ -n "$CIRCLE_TAG" ]]; then
                        if [[ "$CIRCLE_TAG" =~ ^v([0-9])\.([0-9])\.([0-9])(-(preview-[0-9]+))$ ]]; then
                            VersionMajor="${BASH_REMATCH[1]}"
                            VersionMinor="${BASH_REMATCH[2]}"
                            VersionPatch="${BASH_REMATCH[3]}"
                            VersionSuffix="${BASH_REMATCH[5]}"

                            ToolVersion="$VersionMajor.$VersionMinor.$VersionPatch-$VersionSuffix"
                        fi
                    fi

                    # special handling for pre-releases (is a constraint by .net Core global tools)
                    # and also to prevent installation from NuGet-feed (which may have higher version than the
                    # built tool)
                    if [[ -z "$ToolVersion" ]]; then
                        dotnet tool install -g --configfile=ci-nuget.config trx2junit
                    else
                        dotnet tool install -g --version="$ToolVersion" --configfile=ci-nuget.config trx2junit
                    fi
            - run:
                name: global tool install (trx2junit)
                when: on_fail
                command: |
                    echo "Previous job failed, so use trx2junit from NuGet instead of local copy"
                    echo ""
                    dotnet tool install -g trx2junit
            - run:
                name: project test results
                when: always
                command: |
                    if [[ -d "tests/TestResults" ]]; then
                        find tests/TestResults -name "*.trx" | xargs -n1 trx2junit
                        #rm tests/TestResults/*.trx
                    fi
            - run:
                name: code coverage
                command: |
                    if [[ -z "$CODECOV_TOKEN" ]]; then
                        echo "codecov token not set -- skipping code coverage"
                    else
                        ./build.sh coverage
                    fi
            - run:
                name: run-samples
                command: |
                    # default is `set -e`, so override it on behalve that the test-failure is not reported
                    set +e

                    dotnet test --no-build -c Release --logger "trx;LogFileName=nunit.trx"  samples/NUnitSample
                    dotnet test --no-build -c Release --logger "trx;LogFileName=mstest.trx" samples/MsTestSample
                    dotnet test --no-build -c Release --logger "trx;LogFileName=xunit.trx" samples/XUnitSample

                    echo ""
                    mkdir ./TestResults
                    mv samples/NUnitSample/TestResults/nunit.trx   ./TestResults/nunit.trx
                    mv samples/MsTestSample/TestResults/mstest.trx ./TestResults/mstest.trx
                    mv samples/XUnitSample/TestResults/xunit.trx   ./TestResults/xunit.trx

                    trx2junit ./TestResults/nunit.trx
                    trx2junit ./TestResults/mstest.trx
                    trx2junit ./TestResults/xunit.trx

                    echo ""
                    ./verify-xml.sh "TestResults/nunit.xml"
                    ./verify-xml.sh "TestResults/mstest.xml"
                    ./verify-xml.sh "TestResults/xunit.xml"
            - run:
                name: run-single-arg
                command: |
                    mkdir ./single-arg
                    cp tests/trx2junit.Tests/data/nunit.trx ./single-arg

                    echo "-----------------------------------------------"
                    echo "file in different location than pwd"
                    trx2junit ./single-arg/nunit.trx

                    echo ""
                    ./verify-xml.sh "single-arg/nunit.xml"

                    echo ""
                    echo "-----------------------------------------------"
                    echo "file in same location than pwd"
                    cd single-arg
                    trx2junit nunit.trx

                    echo ""
                    cd -
                    ./verify-xml.sh "single-arg/nunit.xml"
            - run:
                name: run-multiple-args
                command: |
                    mkdir ./multiple-args
                    cp tests/trx2junit.Tests/data/* ./multiple-args

                    echo ""
                    trx2junit ./multiple-args/mstest.trx ./multiple-args/mstest-warning.trx ./multiple-args/nunit.trx

                    echo ""
                    ./verify-xml.sh "multiple-args/mstest.xml"
                    ./verify-xml.sh "multiple-args/mstest-warning.xml"
                    ./verify-xml.sh "multiple-args/nunit.xml"
            - run:
                name: run-globbing
                command: |
                    mkdir ./globbing
                    cp tests/trx2junit.Tests/data/* ./globbing

                    echo ""
                    trx2junit ./globbing/*.trx

                    echo ""
                    ./verify-xml.sh "multiple-args/mstest.xml"
                    ./verify-xml.sh "multiple-args/mstest-warning.xml"
                    ./verify-xml.sh "multiple-args/nunit.xml"
            - run:
                name: run-different-output-location
                command: |
                    mkdir ./different-output-location
                    cp tests/trx2junit.Tests/data/* ./different-output-location

                    echo ""
                    trx2junit --output ./tests/junit-out ./different-output-location/mstest.trx ./different-output-location/nunit.trx

                    echo ""
                    ./verify-xml.sh "tests/junit-out/mstest.xml"
                    ./verify-xml.sh "tests/junit-out/nunit.xml"
            - persist_to_workspace:
                root: .
                paths:
                    - build.sh
                    - NuGet-Packed
            - store_test_results:
                path: tests/TestResults
            - store_artifacts:
                path: tests/TestResults
                destination: TestResults
    deploy_nuget:
        <<: *defaults
        steps:
            - attach_workspace:
                at: .
            - run:
                name: deploy to NuGet
                command: |
                    chmod ugo+x ./build.sh
                    ./build.sh deploy nuget
    deploy_myget:
        <<: *defaults
        steps:
            - attach_workspace:
                at: .
            - run:
                name: deploy to MyGet
                command: |
                    chmod ugo+x ./build.sh
                    ./build.sh deploy myget

workflows:
    version: 2
    build_test_deploy:
        jobs:
            - build_and_test:
                filters:
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9](-preview-[0-9]+)?$/
            - deploy_nuget:
                requires:
                    - build_and_test
                filters:
                    branches:
                        ignore: /.*/
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9]$/
                context: org-global
            - deploy_myget:
                requires:
                    - build_and_test
                filters:
                    branches:
                        #only: master
                        ignore: /.*/
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9](-preview-[0-9]+)?$/
                context: org-global
