version: 2.1

executors:
    build-executor:
        docker:
            - image: gfoidl/dotnet-xmllint:3.0
              environment:
                DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
                DOTNET_CLI_TELEMETRY_OPTOUT: 1

    deploy-executor:
        docker:
            - image: mcr.microsoft.com/dotnet/core/sdk:3.0
              environment:
                DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
                DOTNET_CLI_TELEMETRY_OPTOUT: 1

commands:
    set_env:
        description: "Sets the build environment variables"
        steps:
            - run:
                name: "set build environment"
                command: |
                    if [[ -z "$CI_BUILD_NUMBER" ]]; then
                        echo 'export CI_BUILD_NUMBER="$CIRCLE_BUILD_NUM"' >> "$BASH_ENV"
                        echo 'export BRANCH_NAME="$CIRCLE_BRANCH"' >> "$BASH_ENV"
                        echo 'export TAG_NAME="$CIRCLE_TAG"' >> "$BASH_ENV"
                    fi

                    # Exporting / sourcing the path before installing the tool prevents the message about the PATH
                    echo 'export PATH="$PATH:/root/.dotnet/tools"' >> "$BASH_ENV"

    build_test:
        description: "Builds and tests"
        steps:
            - checkout
            - set_env
            - run:
                name: init
                command: |
                    chmod ugo+x ./*.sh
                    chmod ugo+x ./tests/scripts/*.sh

                    # Use v1.4.1 as this supports .NET Core 2.1. Version 1.5.0 is for .NET Core 2.2.
                    dotnet tool install -g --version=1.4.1 coverlet.console
            - run:
                # build has to be from the build.sh in order to pick the correct version numbers, etc.
                name: build
                command: ./build.sh build
            - run:
                name: test
                command: ./build.sh test
            - run:
                name: pack
                command: ./build.sh pack
            - run:
                name: global tool install (trx2junit)
                command: |
                    # copied from build.sh (but modified)
                    if [[ -n "$CIRCLE_TAG" ]]; then
                        if [[ "$CIRCLE_TAG" =~ ^v([0-9])\.([0-9])\.([0-9])(-(preview-[0-9]+))$ ]]; then
                            VersionMajor="${BASH_REMATCH[1]}"
                            VersionMinor="${BASH_REMATCH[2]}"
                            VersionPatch="${BASH_REMATCH[3]}"
                            VersionSuffix="${BASH_REMATCH[5]}"

                            ToolVersion="$VersionMajor.$VersionMinor.$VersionPatch-$VersionSuffix"
                        fi
                    fi

                    # special handling for pre-releases (is a constraint by .net Core global tools)
                    # and also to prevent installation from NuGet-feed (which may have higher version than the
                    # built tool)
                    if [[ -z "$ToolVersion" ]]; then
                        dotnet tool install -g --configfile=ci-nuget.config trx2junit
                    else
                        dotnet tool install -g --version="$ToolVersion" --configfile=ci-nuget.config trx2junit
                    fi
            - run:
                name: global tool install (trx2junit)
                when: on_fail
                command: |
                    echo "Previous job failed, so use trx2junit from NuGet instead of local copy"
                    echo ""
                    dotnet tool install -g trx2junit
            - run:
                name: project test results
                when: always
                command: |
                    if [[ -d "tests/TestResults" ]]; then
                        trx2junit tests/TestResults/*.trx
                        #rm tests/TestResults/*.trx
                    fi
            - run:
                name: code coverage
                command: |
                    if [[ -z "$CODECOV_TOKEN" ]]; then
                        echo "codecov token not set -- skipping code coverage"
                    else
                        ./build.sh coverage
                    fi
            - run: ./tests/scripts/run-samples.sh
            - run: ./tests/scripts/run-single-arg.sh
            - run: ./tests/scripts/run-multiple-args.sh
            - run: ./tests/scripts/run-globbing.sh
            - run: ./tests/scripts/run-different-output-location.sh
            - persist_to_workspace:
                root: .
                paths:
                    - build.sh
                    - NuGet-Packed
            - store_test_results:
                path: tests/TestResults
            - store_artifacts:
                path: tests/TestResults
                destination: TestResults

jobs:
    build_test_job:
        executor: build-executor
        steps:
            - build_test

    deploy_job:
        executor: deploy-executor
        parameters:
            target:
                type: string
        steps:
            - set_env
            - attach_workspace:
                at: .
            - run:
                name: deploy to << parameters.target >>
                command: |
                    chmod ugo+x ./build.sh
                    ./build.sh deploy << parameters.target >>

workflows:
    version: 2
    build_test_deploy:
        jobs:
            - build_test_job:
                filters:
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9](-preview-[0-9]+)?$/

            - deploy_job:
                name: deploy-nuget
                target: nuget       # parameter
                requires:
                    - build_test_job
                filters:
                    branches:
                        ignore: /.*/
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9]$/
                context: org-global

            - deploy_job:
                name: deploy-myget
                target: myget       # parameter
                requires:
                    - build_test_job
                filters:
                    branches:
                        #only: master
                        ignore: /.*/
                    tags:
                        only: /^v[0-9]\.[0-9]\.[0-9](-preview-[0-9]+)?$/
                context: org-global
